package com.infrasofttech.microfinance.servicesimpl;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.transaction.Transactional;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.infrasofttech.microfinance.entityBeans.master.CustomerLoanCPVBusinessRecordEntity;
import com.infrasofttech.microfinance.repository.CustomerLoanCPVBusinessRecordRepository;
import com.infrasofttech.microfinance.services.CustomerLoanCPVBusinessRecordService;


@Service
@Transactional
public class CustomerLoanCPVBusinessRecordServiceImpl implements CustomerLoanCPVBusinessRecordService{

	@Autowired
	CustomerLoanCPVBusinessRecordRepository repo;
	
	
	
	@Transactional
	@Override
		public ResponseEntity<?> addList(List<CustomerLoanCPVBusinessRecordEntity> group) {

		System.out.println(group);
		
		try {
			return new ResponseEntity<Object>(repo.saveAll(group),new HttpHeaders(),HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<>(HttpStatus.UNPROCESSABLE_ENTITY);
		}
	}
	
	@Transactional
	@Override
	public List<CustomerLoanCPVBusinessRecordEntity> isDataSynced(int isDataSynced) {
		System.out.println("Inside is Data Synced");
		List<CustomerLoanCPVBusinessRecordEntity> resultList = null;
		try {
			resultList = new ArrayList<CustomerLoanCPVBusinessRecordEntity>();
			resultList = repo.findDataByisDataSynced(isDataSynced);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultList;
	}
	
	@Transactional
	public int updateStatus(int mrefno) {
		int isUpdated = 0;
		try {
			System.out.println("isUpdated" + isUpdated);
			isUpdated = repo.updateStatus(mrefno);

		} catch (Exception e) {
			return isUpdated;
		}
		return isUpdated;
	}
	
	@Transactional
	public int updateErrorStatus(int mrefno) {
		int isUpdated = 0;
		try {
			System.out.println("isUpdated" + isUpdated);
			isUpdated = repo.updateErrorStatus(mrefno);

		} catch (Exception e) {
			return isUpdated;
		}
		return isUpdated;
	}
	
	@Override
	public void updateMleadsIdfromMrefTref(String mleadsid, int mloanmrefno, int mloantrefno) {
		try {
			repo.updateLeadsIdFromLoanMrefTref(mleadsid, mloanmrefno, mloantrefno,LocalDateTime.now());
			System.out.print("Updated CPV for leads id "+mleadsid+mloanmrefno+mloantrefno );
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
	}


	

}
